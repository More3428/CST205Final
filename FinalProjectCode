#Comments   
# Course - CST205 Multimedia Design and Programming 
# Title - Photoz
# Abstarct- Create an app where a user is able to upload their own photo with a green/blue background 
#           and the app would give them the options to choose their background from the site    
#           or filter and apply it to their inputted picture. 
# Authors- Andre Moreno, Marcos Arroyo , Yulisa Ayala-Garcia



import cv2
import matplotlib.pyplot as plt
import numpy as nump
from PIL import Image
import math 
import sys
from PySide6.QtWidgets import (QApplication, QWidget, QLabel, QPushButton,   QVBoxLayout, QComboBox)
from PySide6.QtGui import QPixmap
from PySide6.QtCore import Slot


# Idealy we would have the user imput their own image here. 
person = Image.open('images/ctree_bluescreen.jpeg')
scene = Image.open('images/beach.jpg')
green = person.getpixel((10,50))

w = min(person.width, scene.width)
h = min(person.height, scene.width)
scene = scene.resize((person.width, person.height))

#Chroma Key Code
def distance(color_1, color_2):
      r_diff = math.pow((color_1[0] - color_2[0]),2)
      g_diff = math.pow((color_1[1] - color_2[1]),2)
      b_diff = math.pow((color_1[2] - color_2[2]),2)
      return math.sqrt(r_diff + g_diff + b_diff)


def chromakey(src, bg):
      for x in range(src.width):
            for y in range(src.height):
                  cur_pixel = src.getpixel((x,y))
                  if distance(cur_pixel, green) < 160:
                        src.putpixel((x,y), bg.getpixel((x,y)))
      src.show()


chromakey(person, scene)


This code is for the photo filter and where is starts


class NewWindow(QWidget):
  def __init__(self, url):
    super().__init__()
    self.text = QLabel(url)
    self.layout = QVBoxLayout()
    self.layout.addWidget(self.text)
    self.setLayout(self.layout)


class MyWindow(QWidget):
  def __init__(self):
    super().__init__()
    #The Title
    self.text = QLabel("images/ctree_bluescreen.jpeg")
    #pick filter options for your
    self.my_list = ['Negative', 'Arctic', 'Sunset', 'Plain']

    self.combo = QComboBox()
    self.combo.addItems(self.my_list)
    #this button should move to the next decision after the photo filter
    self.btn = QPushButton('Next')
    vbox = QVBoxLayout()
    vbox.addWidget(self.text)
    vbox.addWidget(self.combo)
    vbox.addWidget(self.btn)
    #opens the screen with the title,options, next
    self.setLayout(vbox)

    self.btn.clicked.connect(self.open_win)

  @Slot() 
  def open_win(self):
    i = self.combo.currentIndex()
    #instead of showing the image go to the next step
    self.new_win = NewWindow(self.my_list[i])
    if self.my_list[i] == 'Sunset':
      imagefile = Image.open('images/ctree_bluescreen.jpeg')
      def photofilter(picture):
          new_list=[]
          for p in picture.getdata():
              new_list.append((p[0], p[1]-65, p[2]//2))
          picture.putdata(new_list)
          photofilter(imagefile)
    if self.my_list[i] == 'Arctic':
      imagefile = Image.open('images/ctree_bluescreen.jpeg')
      def photofilter(picture):
          new_list=[]
          for p in picture.getdata():
              new_list.append((p[0]//2, p[1]//3, p[2]))
          picture.putdata(new_list)
          photofilter(imagefile)
    if self.my_list[i] == 'plain':
      imagefile = Image.open('images/ctree_bluescreen.jpeg')
      def photofilter(picture):
          new_list=[]
          for p in picture.getdata():
              new_list.append((p[0], p[1], p[2]))
          picture.putdata(new_list)
          photofilter(imagefile)
    if self.my_list[i] == 'Negative':
      imagefile = Image.open('images/ctree_bluescreen.jpeg')
      def photofilter(picture):
          new_list=[]
          for p in picture.getdata():
              new_list.append((p[0]-255, p[1]-255, p[2]-255))
          picture.putdata(new_list)
          photofilter(imagefile)




    #self.new_win.show()
    self.repaint()


app = QApplication(sys.argv)
main = MyWindow()
main.show()
sys.exit(app.exec_())

#this is where it ends
#Github Link: https://github.com/More3428/CST205Final
